#!/bin/bash

print_info() {
    printf "\e[0;35m$1\e[0m\n"
}
print_success() {
    printf "\e[0;32m  [âœ”] %s\e[0m\n" "$1"
}

GH_URL=https://github.com/
semanticVersionPattern="v[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}"
pattern="[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}"

while :
do
    case $2 in
        --force) FORCE=1; shift; ;;
        *) break; ;;
    esac
done

FILETYPE="package"

if [ "$1" == 'fd' ]; then
    REPO=sharkdp/fd
    NAME=fd
    BINFILE="$GH_URL$REPO/releases/download/vVERSION/$1_VERSION_amd64.deb"
    GREPVER="fd --version | awk -F\  '{print \$2}' | tr -d '[:space:]'"
elif [ "$1" == 'bat' ]; then
    REPO=sharkdp/bat
    NAME=bat
    BINFILE="$GH_URL$REPO/releases/download/vVERSION/$1-musl_VERSION_amd64.deb"
    GREPVER="bat --version | awk -F\  '{print \$2}' | tr -d '[:space:]'"
elif [ "$1" == 'rofi' ]; then
    semanticVersionPattern=$pattern
    REPO=DaveDavenport/rofi
    NAME=rofi
    FILETYPE="archive"
    BINFILE="$GH_URL$REPO/releases/download/VERSION/$1-VERSION.tar.gz"
    BINPATH=/usr/bin/rofi
    GREPVER="rofi -v | awk -F: '{print \$2}' | tr -d '[:space:]'"
elif [[ "$1" == 'insomnia' ]]; then
    REPO=getinsomnia/insomnia
    NAME=insomnia
    BINFILE="$GH_URL$REPO/releases/download/vVERSION/$1_VERSION_amd64.deb"
    GREPVER="apt-cache show $1 | grep Version | awk -F: '{print $2}' | egrep -o \"$pattern\""
elif [[ "$1" == 'vscode' ]]; then
    semanticVersionPattern=$pattern
    REPO=Microsoft/vscode
    NAME=code
    BINFILE=https://vscode-update.azurewebsites.net/latest/linux-deb-x64/stable
    GREPVER="code -v"
elif [[ "$1" == 'atom' ]]; then
    REPO=atom/atom
    NAME=atom
    BINFILE="$GH_URL$REPO/releases/download/vVERSION/$1-amd64.deb"
    GREPVER="atom --version | grep Atom | awk -F: '{print \$2}' | tr -d '[:space:]'"
elif [[ "$1" == 'mattermost' ]]; then
    REPO=mattermost/desktop
    NAME=mattermost-desktop
    BINFILE=https://releases.mattermost.com/desktop/VERSION/mattermost-desktop-VERSION-linux-amd64.deb
    GREPVER="apt-cache show $1-desktop | grep Version | awk -F: '{print $2}' | egrep -o \"$pattern\""
elif [[ "$1" == 'docker-compose' ]]; then
    semanticVersionPattern=$pattern
    REPO=docker/compose
    NAME=docker-compose
    FILETYPE="binary"
    BINFILE="$GH_URL$REPO/releases/download/VERSION/$1-$(uname -s)-$(uname -m)"
    BINPATH=/usr/local/bin/docker-compose
    GREPVER="docker-compose -v"
elif [[ "$1" == 'mailspring' ]]; then
    semanticVersionPattern=$pattern
    REPO=Foundry376/Mailspring
    NAME=mailspring
    BINFILE=$GH_URL$REPO/releases/download/VERSION/$1-VERSION-amd64.deb
    GREPVER="apt-cache show $1 | grep Version | awk -F: '{print $2}' | egrep -o \"$pattern\""
elif [[ "$1" == 'yakyak' ]]; then
    REPO=yakyak/yakyak
    NAME=yakyak
    BINFILE=$GH_URL$REPO/releases/download/vVERSION/$1-VERSION-linux-amd64.deb
    GREPVER="apt-cache show $1 | grep Version | awk -F: '{print $2}' | egrep -o \"$pattern\""
elif [[ "$1" == 'lnav' ]]; then
    REPO=tstack/lnav
    NAME=lnav
    BINFILE=$GH_URL$REPO/releases/download/vVERSION/$1_VERSION_amd64.deb
    GREPVER="lnav -V | awk -F\  '{print $2}' | tr -d '[:space:]'"
fi

lastReleasesUrl="$GH_URL$REPO/releases.atom"
lastReleaseCache="/tmp/$NAME-last-release"

if [[ -z ${BINPATH+x} ]]; then
    BINPATH=$(command -v $NAME)
fi

currentVersion="v0.0.0"
if [ -z "$GREPVER" ]; then
    echo "Unable to get the current version, skipping..."
elif [[ -f $BINPATH ]]; then
    currentVersion="v$(eval "$GREPVER")"
fi

currentVersion=$(echo $currentVersion | egrep -o "$semanticVersionPattern")
echo "Current: $currentVersion"

#if [ ! -f $lastReleaseCache ] || [ "$(( $(date +"%s") - $(stat -c "%Y" $lastReleaseCache) ))" -gt "86400" ]; then
    # echo "Checking latest $NAME version..."
    # @NOTE: we put a double quote of the end of first grep to get only latest stable release
    wget -q -O- $lastReleasesUrl | \
        egrep -m1 -o "/$REPO/releases/tag/$semanticVersionPattern\"" | \
        egrep -o "$semanticVersionPattern" \
        > $lastReleaseCache
#fi

latestVersion=$(cat $lastReleaseCache)
echo "Latest: $latestVersion"

# remove v from semver
VERSION=$(echo "$latestVersion" | cut -d 'v' -f 2)
URL=$(echo $BINFILE | sed "s/VERSION/$VERSION/g")

if [ "$latestVersion" != "$currentVersion" ]; then
    echo "Updating $NAME from ${currentVersion} to ${latestVersion}"
    if [ "$FILETYPE" == 'binary' ]; then
        curl -o $BINPATH -J -L "$URL"
        chmod +x $BINPATH
    fi

    if [ "$FILETYPE" == 'archive' ]; then
        tmp_filepath="/tmp/$NAME.tar.gz"
        curl -o $tmp_filepath -J -L "$URL"
        tar -zxvf $tmp_filepath -C /tmp
        cd /tmp/$NAME-$VERSION
        ./configure
        make
        make install
    fi

    if [ "$FILETYPE" == 'package' ]; then
        tmp_filepath="/tmp/$NAME.deb"
        # Download the deb and install it
        curl -o $tmp_filepath -J -L "$URL"
        # wget -q --show-progress --progress=bar:force "$URL" -O $tmp_filepath && \
        sudo dpkg -i $tmp_filepath && \
        rm $tmp_filepath
    fi

    print_success "$NAME has been upgraded to $latestVersion"
else
    echo "Already up-to-date."
fi
