#!/usr/bin/env bash

echo_version() {
    print_info "v1.0.0";
}

backup_file() {
    if [[ -f $HOME/$1.dotbackup ]]; then
        rm $HOME/$1.dotbackup
    fi
    test -e $HOME/$1 && cp -LiR $HOME/$1 $HOME/$1.dotbackup && rm -rf $HOME/$1
    true
}

backup_directory() {
    rm -rf $HOME/$1.dotbackup
    test -d $HOME/$1.dotbackup && echo -n "~/$1.dotbackup: " && rm -rI $HOME/$1.dotbackup
    test -d $HOME/$1 && cp -LR $HOME/$1 $HOME/$1.dotbackup && rm -rf $HOME/$1
    true
}

link_file() {
    backup_file $2
    ln -s `pwd`/$1 $HOME/$2
}

link_directory() {
    backup_directory $2
    ln -s `pwd`/$1 $HOME/$2
}

copy_file() {
    backup_file $2
    cp `pwd`/$1 $HOME/$2
}

clone_or_pull_repo() {
    if [ ! -f $HOME/$2/README.md ]; then
        git clone https://github.com/$1.git $HOME/$2
    else
        pushd $HOME/$2 > /dev/null
        git pull
        popd > /dev/null
    fi
}

load_zsh_modules() {
    echo "Loading zsh modules..."
    while read l; do
        IFS=/ read -a path <<< "$l"
        clone_or_pull_repo "$l" ".zsh_modules/${path[1]}"
    done < $HOME/.zmodules
}


configure_ack() {
    echo "Configuring ack..."
    link_file ackrc .ackrc
}

configure_pip() {
    echo "Configuring pip..."
    link_file pip.conf .pip/pip.conf
}

configure_bash() {
    echo "Configuring bash..."
    link_file bashrc .bashrc
    echo "Set default shell to bash"
    chsh -s $(which bash)
}

configure_zsh() {
    # Clone antigen repository from GitHub only if it isn't already present
    if [[ ! -d $HOME/.antigen/ ]]; then
        echo "Clone antigen repository"
        clone_or_pull_repo zsh-users/antigen .antigen
    fi

    # Backup any existing zshrc
    if [ -f $HOME/.zshrc/ ]; then
        backup_file .zshrc
    fi
    link_file zshrc .zshrc
    backup_file .zcompdump

    # Install zsh if needed
    if [ -f /bin/zsh -o -f /usr/bin/zsh ]; then
        echo "zsh is already installed... skip"
    else
        ostype=$(uname);
        if [ $ostype == "Darwin" ]; then
            echo "OSX : Please install zsh via homebrew - brew install zsh"
        elif [ $ostype == "Linux" ]; then
            sudo apt-get install zsh
            echo "Set default shell to zsh"
            chsh -s $(which zsh)
        else
            echo "Your OS is neither MacOS or Linux... skip"
        fi
    fi
}

configure_git() {
    print_info "Configuring git..."
    if [ -z "$GIT_NAME" ]; then
        read -p "Git user.name: " GIT_NAME
    fi
    if [ -z "$GIT_EMAIL" ]; then
        read -p "Git user.email: " GIT_EMAIL
    fi
    backup_file .gitconfig
    sed -e 's/\[\[GIT_NAME\]\]/'"$GIT_NAME"'/g' -e 's/\[\[GIT_EMAIL\]\]/'"$GIT_EMAIL"'/g' `pwd`/git/gitconfig > $HOME/.gitconfig
    link_file git/gitignore .gitignore
    print_success "Git configuration done!"
}

configure_vim() {
    if [ -f /bin/vim -o -f /usr/bin/vim ]; then
        echo "Configuring vim..."
    else
        ostype=$(uname);
        if [ $ostype == "Darwin" ]; then
            echo "OSX : Please install zsh via homebrew - brew install vim"
        elif [ $ostype == "Linux" ]; then
            sudo apt-get install vim
            echo "Set default shell to vim"
        else
            echo "Your OS is neither MacOS or Linux... skip"
        fi
    fi
    echo "Configuring vim..."
    link_file vimrc .vimrc
    link_directory vim .vim
    clone_or_pull_repo gmarik/vundle .vim/bundle/Vundle.vim
    echo "Installing Vim plugins. Please wait..."
    vim +PluginInstall +qall > /dev/null 2>&1
}

install_source_code_pro_font() {
	echo "Installing Source Code Pro font..."
    font_url=https://github.com/adobe-fonts/source-code-pro/archive/2.010R-ro/1.030R-it.tar.gz
	ostype=$(uname);

    if [ $ostype == "Darwin" ]; then
        fonts_dir="$HOME/Library/Fonts/"
    else
        mkdir -p $HOME/.fonts/truetype/source-code-pro
        fonts_dir="$HOME/.fonts/truetype/source-code-pro/"
    fi

    tmp_dir="$HOME/tmp/dotfiles/fonts"

    mkdir -p $tmp_dir
    wget -O $tmp_dir/sourcecodepro.tar.gz $font_url
    tar -zxf $tmp_dir/sourcecodepro.tar.gz -C $tmp_dir
    cp $tmp_dir/source-code-pro-*/TTF/*.ttf $fonts_dir
    rm -r $tmp_dir

    echo "Font installed ! Clean user font cache"
    if [ $ostype == "Darwin" ]; then
    	atsutil databases -removeUser
		atsutil server -shutdown
		atsutil server -ping
	else
    	fc-cache
    fi
}

configure_vscode() {
    echo "Configuring preferences for VSCode..."
    if [ "$(uname -s)" = "Darwin" ]; then
        VSCODE_HOME="$HOME/Library/Application Support/Code"
    else
        VSCODE_HOME="$HOME/.config/Code"
    fi
    if [[ -d "$VSCODE_HOME/User" ]]; then
        echo "Backup current VSCode config"
        mv "$VSCODE_HOME/User" "$VSCODE_HOME/User.dotbackup"
    fi
    ln -s $HOME/dotfiles/vscode/User "$VSCODE_HOME/User"


    if [[ `uname` == 'Linux' ]]; then
        echo "Download and install latest VSCode text editor"
        bash $HOME/dotfiles/scripts/utils/updater/vscode.sh
    fi

    if test "$(which code)"; then
        echo "Add VSCode plugins"
        # from `code --list-extensions`
        modules="
            alefragnani.project-manager
            Equinusocio.vsc-material-theme
            ms-vscode.sublime-keybindings
        "
        for module in $modules; do
            code --install-extension "$module" || true
        done
    fi
}

configure_atom() {
    echo "Configuring preferences for Atom..."
    if [[ -d "$HOME/.atom" ]]; then
        echo "Backup current atom config"
        mv "$HOME/.atom" "$HOME/.atom.dotbackup"
    fi
    ln -s $HOME/dotfiles/atom "$HOME/.atom"

    echo "Download and install latest Atom text editor"
    if [[ `uname` == 'Linux' ]]; then
        bash $HOME/dotfiles/scripts/utils/updater/atom.sh
    fi

    if test "$(which apm)"; then
        echo "Add Atom plugins"
        plugins=(atom-material-syntax atom-material-ui minimap language-docker project-manager tool-bar tool-bar-main)
        for plugin in "${plugins[@]}"
        do
            apm install $plugin || true
        done
    fi
}

configure_sublime() {
    package_control_url=https://packagecontrol.io/Package%20Control.sublime-package
    plugins=(soifou)
    ostype=$(uname);

    if [ $ostype == "Darwin" ]; then
        sublime_dir="$HOME/Library/Application Support/Sublime Text 3"
    else
        sublime_dir="$HOME/.config/sublime-text-3"
    fi

    # revert change - testing
    # rm "$sublime_dir/Packages/User"
    # rm -r "$sublime_dir/Installed Packages"
    # for plugin in "${plugins[@]}"
    # do
    #     echo "    * removing $plugin plugin"
    #     rm "$sublime_dir/Packages/$plugin"
    # done

    echo "Configuring preferences for Sublime Text..."
    if [[ -d "$sublime_dir/Packages/User" ]]; then
        echo "Backup current customer config"
        mv "$sublime_dir/Packages/User" "$sublime_dir/Packages/User.dotbackup"
    fi
    ln -s $HOME/dotfiles/sublime/User "$sublime_dir/Packages/"

	echo "Download Sublime Package Control"
    wget -P "$sublime_dir/Installed Packages" $package_control_url

    echo "Add custom Sublime plugins"
    echo " "
    for plugin in "${plugins[@]}"
    do
        echo "    * adding $plugin plugin"
        ln -s $HOME/dotfiles/sublime/$plugin "$sublime_dir/Packages/$plugin"
    done
	echo "Done! At the next start Sublime Text will fetch/upgrade packages"
}

print_success() {
    # Print output in green
    printf "\e[0;32m  [✔] $1\e[0m\n"
}
print_error() {
    # Print output in red
    printf "\e[0;31m  [✖] $1 $2\e[0m\n"
}
print_info() {
    # Print output in purple
    printf "\e[0;35m $1\e[0m\n"
}
print_question() {
    # Print output in yellow
    printf "\e[0;33m  [?] $1\e[0m"
}

delete_backups() {
    rm -rf $HOME/.ackrc.dotbackup
    rm -rf $HOME/.gitconfig.dotbackup
    rm -rf $HOME/.gitignore.dotbackup
    rm -rf $HOME/.oh-my-zsh.dotbackup
    rm -rf $HOME/.vim.dotbackup
    rm -rf $HOME/.vimrc.dotbackup
    rm -rf $HOME/.zcompdump.dotbackup
    rm -rf $HOME/.zshrc.dotbackup
}

# update() {
#     echo "Updating configuration..."
#     git pull origin master
#     if [ "$NO_VIM" != 1 ]; then
#         echo "Updating Vim plugins. Please wait..."
#         vim +PluginUpdate +qall > /dev/null 2>&1
#     fi
#     load_zsh_modules
#     rm -f $HOME/.zcompdump
# }

set -e

while :
do
    case $1 in
        -h | --help | -\?)
            print_info "";
            print_info "Dotfiles - Bootstrap available commands";
            print_info "";
            print_info "--ack             Ack custom config";
            print_info "--atom            Install and configure preferences, add custom/useful plugins for atom text editor"
            print_info "--delete-backups  Remove all dotbackup files";
            print_info "--font-scp        Install Source Code Pro font";
            print_info "--git             Create config/ignore Git files for the current user";
            print_info "--git-name        Set your Git display name";
            print_info "--git-email       Set your Git email";
            print_info "--pip             Pip custom config";
            print_info "--sublime         Configure preferences, add custom/useful plugins for sublime text editor"
            print_info "--vim             Create custom vimrc, add colors/syntax/plugins"
            print_info "--vscode          Configure VSCode"
            print_info "--zsh             Install and config Zsh as default shell";
            print_info "";
            exit 0; ;;
        -v | --version) echo_version; exit 0; ;;

        --ack) ACK=1; shift; ;;
        --atom) ATOM=1; shift; ;;
        --delete-backups) DELETE_BACKUPS=1; shift; ;;
        --font-scp) FONT_SCP=1; shift; ;;
        --git) GIT=1; shift; ;;
        --git-name) GIT_NAME=$2; shift 2; ;;
        --git-email) GIT_EMAIL=$2; shift 2; ;;
        --pip) PIP=1; shift; ;;
        --sublime) SUBLIME=1; shift; ;;
        --vim) VIM=1; shift; ;;
        --vscode) VSCODE=1; shift; ;;
        --zsh) ZSH=1; shift; ;;
        --update) UPDATE=1; shift; ;;
        --) shift; break; ;;
        -*) printf >&2 'WARNING: Unknown option (ignored): %s\n' "$1"; shift; ;;
        *) break; ;;
    esac
done

if [ "$DELETE_BACKUPS" == 1 ]; then
    delete_backups
    echo "Backups deleted."
    exit 0
fi
if [ "$ACK" == 1 ]; then
    configure_ack
fi
if [ "$ATOM" == 1 ]; then
    configure_atom
fi
if [ "$FONT_SCP" == 1 ]; then
    install_source_code_pro_font
fi
if [ "$GIT" == 1 ]; then
    configure_git
fi
if [ "$PIP" == 1 ]; then
    configure_pip
fi
if [ "$SUBLIME" == 1 ]; then
    configure_sublime
fi
if [ "$VIM" == 1 ]; then
    configure_vim
fi
if [ "$VSCODE" == 1 ]; then
    configure_vscode
fi
if [ "$ZSH" == 1 ]; then
    configure_zsh
fi

echo "Done."

# credits : https://github.com/alanctkc/dotfiles/blob/master/bootstrap.sh