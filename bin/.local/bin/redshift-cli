#!/usr/bin/env sh

# Requirements: redshift (obviously), bc, xrdb

__usage="
Usage: $(basename "$0") [OPTIONS]
Adjust temperature screen from redshift according to your geolocation (no daemon required).
Additionally you can control brightness screen if you have a monitor without backlight interface (ie. desktop monitor).

Options:
  -s     Current status of redshift (1: on, 0: off)
  -u     Increase screen brightness to .1
  -d     Decrease screen brightness to .1
  -a     Apply redshift with current setting (temperature and brightness)
  --on   Turn on this script
  --off  Turn off this script
  -t     Toggle the state of the script
  -h     Show this help.
"

# Configuration
lightbulb_on=
lightbulb_off=
temp_range="6500:2700"
method=randr
lat="$OPENWEATHERMAP_LAT"
long="$OPENWEATHERMAP_LONG"

# For storing current brightness
tmpfile="${XDG_CACHE_HOME:-~/.cache}"/redshift-cli
[ ! -f "$tmpfile" ] && { echo 1.0 >"$tmpfile"; }
brightness=$(cat "$tmpfile")

# Adjust temp and brightness manually
_adjust() {
    redshift -P -O "$(_temp)" -g 1.0 -m $method -b "$brightness"
}

# Get current temperature according to geocode
_temp() {
    redshift -t $temp_range -l "$lat:$long" -p 2>/dev/null |
        grep temp |
        cut -d ":" -f 2 |
        tr -dc "[:digit:]"
}

_display() {
    t=$(_temp)

    if [ -f "$tmpfile.lock" ]; then
        echo "$lightbulb_off" # not running
    elif [ "$t" -ge 6000 ]; then
        echo "%{F$(_color 4)}$lightbulb_on ${t}%{F-}" # Blue
    elif [ "$t" -ge 4000 ]; then
        echo "%{F$(_color 3)}$lightbulb_on ${t}%{F-}" # Yellow
    else
        echo "%{F$(_color 1)}$lightbulb_on ${t}%{F-}" # Red
    fi
}

_brightness() {
    [ "$1" = "down" ] && {
        arith=">" limit=0.1 sign=-
    } || {
        arith="<=" limit=1.0 sign=+
    }

    [ "$brightness" != "$limit" ] && {
        brightness=$(echo "$brightness $sign .1" | bc -l)
    }
    result=$(echo "$brightness $arith $limit" | bc -l)
    [ "$result" = "1" ] && echo "$brightness" >"$tmpfile"

    _adjust
}

_off() {
    redshift -m $method -x
    touch "$tmpfile".lock
}
_on() { rm -f "$tmpfile".lock; }

_toggle() {
    [ -f "$tmpfile".lock ] && _on || _off
    _display
}

_status() { [ -f "$tmpfile".lock ] && echo 0 || echo 1; }
_color() { xrdb -q | grep -m1 -i "color$1" | cut -f2; }
_help() { echo "$__usage" exit; }

case "$1" in
    -s) _status ;;
    -u) [ -f $tmpfile.lock ] && exit 0 || _brightness up ;;
    -d) [ -f $tmpfile.lock ] && exit 0 || _brightness down ;;
    -a) [ ! -f $tmpfile.lock ] && _adjust; _display ;;
    --on) _on ;;
    --off) _off ;;
    -t) _toggle ;;
    -h|*) _help ;;
esac
