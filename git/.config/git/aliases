[alias]
    c = commit
    hist = log --pretty=format:'%C(auto)%h%Creset » %d%s %Cgreen(%cr) %C(bold red)<%an>%Creset' --abbrev-commit
    ignored = ls-files -v | grep "^[[:lower:]]"
    count-commits = shortlog -sn
    uncommit = reset --soft HEAD~

    # list last commit for each branches
    blc = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) - %(color:red)%(objectname:short)%(color:reset) - %(color:yellow)%(refname:short)%(color:reset) - (%(color:green)%(committerdate:relative)%(color:reset)) - %(authorname) - %(contents:subject)'

    # add file(s) to repository
    af = "!f() {\
        [ $# -ge 1 ] && git add --verbose ${@} || {\
            command -v fzf >/dev/null && {\
                git ls-files -o --exclude-standard | fzf -m --no-height --prompt=' add file(s) > ' \
                --preview 'bat -n --color=always --line-range :500 {1}' \
                --preview-window border-left |\
                tr '\\\n' ' ' | xargs -r git add --verbose;\
            }\
        }\
    };f"

    # delete branch(es) except develop, master and current
    bd = "!f() {\
        [ $# -ge 1 ] && git branch | grep -v '*\\|master\\|develop' | grep ${@} | xargs git branch -d || {\
            command -v fzf >/dev/null && {\
                git branch --sort=authordate | grep -v '*\\|master\\|develop' |\
                fzf -m --prompt=' delete branch(es) > ' | tr -d ' \\*' | xargs -r git branch -d;\
            }\
        }\
    };f"

    # checkout branch
    co = "!f() {\
        [ $# -ge 1 ] && git checkout ${@} || {\
            command -v fzf >/dev/null && {\
                git branch --sort=authordate | grep -v '*' |\
                fzf --prompt=' checkout > ' | xargs -n 1 git checkout;\
            }\
        }\
    };f"

    # merge branch to current
    bm = "!f() {\
        [ $# -ge 1 ] && git merge ${@} || {\
            command -v fzf >/dev/null && {\
                git branch -a --color=never | grep -v '*' | sed -e 's/remotes\\///g' |\
                fzf --prompt=' merge > ' --query=${@} | xargs -r -n 1 git merge;\
            }\
        }\
    };f"

    # cherry-pick
    cp = "!f() {\
        [ $# -ge 1 ] && git cherry-pick ${@} || {\
            command -v fzf >/dev/null && {\
                git hist --color=always --branches --oneline |\
                fzf --exact --no-sort -m --ansi --no-height --prompt=' cherry-pick > ' \
                --preview \"echo {} | grep -o '[a-f0-9]\\{7\\}' | head -1 | xargs -I@ sh -c 'git show --color=always @' | DELTA_FEATURES= delta -n\" \
                --preview-window border-left |\
                awk '{print $1}' | xargs -r git cherry-pick;\
            }\
        }\
    };f"

    # show merged branch except master/develop and current branch
    mg = !git branch --merged | grep -v '*\\|master\\|develop';\

    # delete merged branch(es)
    mgd = "!f() {\
        [ $# -ge 1 ] && git mg | grep ${@} | xargs git branch -d || {\
            command -v fzf >/dev/null && {\
                git mg |\
                fzf -m --prompt=' delete merged branch(es) > ' |\
                xargs -r git branch -d;\
            }\
        }\
    };f"

    # show all commits history
    h = "!f() {\
        command -v fzf >/dev/null && {\
            git hist --color=always |\
            fzf --exact --no-sort -m --ansi --no-height --prompt=' commits history > ' \
            --preview \"echo {} | grep -o '[a-f0-9]\\{7\\}' | head -1 | xargs -I@ sh -c 'git show --color=always @' | DELTA_FEATURES= delta -n\" \
            --preview-window $1 |\
            xargs ;\
        } || {\
            git hist;\
        }\
    };f"

    # show commits history for a particular file (similar to gitk)
    hf = "!f() {\
        command -v fzf >/dev/null && {\
            git hist --color=always $2 |\
            fzf --exact --no-sort -m --ansi --no-height --prompt=\" commits history for $2 > \" \
            --preview \"echo {} | grep -o '[a-f0-9]\\{7\\}' | head -1 | xargs -I@ sh -c 'git show -p --follow --color=always @ $2' | DELTA_FEATURES= delta -n\" \
            --preview-window $1 |\
            xargs ;\
        } || {\
            git log -p --follow $2;\
        }\
    };f"

    # find big files stored in repository
    fb = "!f() {\
        git rev-list --objects --all |\
        git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' |\
        sed -n 's/^blob //p' |\
        sort --numeric-sort --key=2 |\
        cut -c 1-12,41- |\
        numfmt --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest | tail -n30;\
    };f"

    # open remote origin in your browser
    or = "!f() {\
        git config -l |\
        grep remote.origin.url |\
        awk -F= '{print $2}' |\
        grep -oE '(ssh://)?git@\\S*' |\
        sed 's/:/\\//g' |\
        sed 's/^\\(ssh\\/\\/\\/\\)\\{0,1\\}git@\\(.*\\)$/https:\\/\\/\\2/' |\
        xargs setsid "$BROWSER";\
    };f"
