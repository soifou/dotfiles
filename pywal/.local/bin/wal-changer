#!/usr/bin/env sh

rgb_to_brg() {
    color=$(xrdb -q | grep -m1 -i "$1" | cut -f2)
    r="$(echo "$color" | cut -c 2-3)"
    g="$(echo "$color" | cut -c 4-5)"
    b="$(echo "$color" | cut -c 6-7)"
    echo "$b$g$r"
}

get_theme() {
    theme=light
    char=$(xrdb -query | grep "*.background" | awk '{print $2}' | cut -c2-2)
    if [ $char -eq $char 2> /dev/null ] && [ "$char" -lt 7 ]; then
        theme=dark
    fi
    echo $theme
}

_wallpaper() {
    echo ":: wallpaper reload"
    # based on what is set as my wallpaper, this could either be a still picture
    # or a cinemagraph. Find out what it is, and launch with the appropriate program.
    WALL="$(cat "$XDG_CACHE_HOME"/wal/wal)"
    MIMETYPE=$(file --mime-type "$WALL" -bL)

    pkill -9 paperview
    [ -f "$XDG_CACHE_HOME"/mpvbg.pid ] && kill -9 "$(cat "$XDG_CACHE_HOME"/mpvbg.pid)"
    rm -f "$XDG_CACHE_HOME"/mpvbg.pid

    case "$MIMETYPE" in
    # Set wallpaper with feh
    *png* | *jpg* | *jpeg*) feh --no-fehbg --bg-fill "$WALL" & ;;
    # Set gif with paperview, a high performance animated desktop background setter
    *gif*)
        GWF="$XDG_CACHE_HOME"/paperview
        GFN="$(basename "$(readlink -f "$WALL")" .gif)"
        command -v paperview >/dev/null 2>&1 || {
            echo >&2 "Please install first paperview (https://github.com/glouw/paperview). Aborting."; exit 1;
        }
        mkdir -p "$GWF/$GFN"
        if [ -n "$(find "$GWF/$GFN" -prune -empty 2>/dev/null)" ]; then
            cp "$WALL" "$GWF/$GFN"
            cd "$GWF/$GFN" || exit
            convert -coalesce "$GFN".gif out.bmp
            rm -f "$GFN".gif
        fi
        paperview "$GWF/$GFN" 5 &
        ;;
    # Play a video on the root window with mpv
    # Note this does not work with a compositor running (eg. picom)
    # see: https://github.com/joshua-sterner/mpvbg/blob/master/mpvbg.sh
    *webm* | *mp4* | *mkv*)
        mpv --no-config -wid 0 --keepaspect=no --loop --really-quiet --name=mpvbg --title=mpvbg "$WALL" &
        echo $! >"$XDG_CACHE_HOME"/mpvbg.pid
        # store our pid here so we can avoid killing our background later
        # Example: $ kill $(pgrep mpv | grep -v $(pgrep -P $(cat $XDG_CACHE_HOME/mpvbg.pid)))
        #           --- Here we are killing "all mpvs, except with THIS PID"
        #           --- This lets us kill a video we're watching, without stopping our desktop background!
    esac
}

_xrdb() {
    echo ":: xrdb reload"
    cp "$XDG_CACHE_HOME"/wal/colors.Xresources $XDG_CONFIG_HOME/x/Xresources.d/colors
    xrdb -load "$XDG_CONFIG_HOME"/x/Xresources
}

_wm() {
    # NOTE: reload first xresources
    _xrdb

    echo ":: wm reload"
    pgrep -x i3 >/dev/null && i3-msg restart
    pgrep -x bspwm >/dev/null && bspc wm -r
}

_polybar() {
    if pgrep -x polybar >/dev/null; then
        polybar-msg cmd restart
    fi
}

_dunst() {
    echo ":: dunst reload"
    mkdir -p "$XDG_CONFIG_HOME"/dunst
    cat "$XDG_CACHE_HOME"/wal/colors-dunst > $XDG_CONFIG_HOME/dunst/dunstrc
    # NOTE: no way to reload: https://github.com/dunst-project/dunst/issues/719
    pkill dunst
    dunst &
}

_lemonbar() {
    echo ":: lemonbar reload"
    if pgrep -x lemonbar >/dev/null; then
        pkill lemonbar
        sh "$XDG_CONFIG_HOME"/lemonbar/run &
    fi
}

_sublime() {
    echo ":: sublime reload"
    # Reload adaptive theme
    python "$XDG_CONFIG_HOME"/wal/generator/sublime.py
}

_kitty() {
    echo ":: kitty reload"

    # Reload +kitten diff
    ruby "$XDG_CONFIG_HOME"/wal/generator/kitty.rb

    # Reload running invocations
    # see: https://github.com/kovidgoyal/kitty/commit/df05339d2a96d16ee59a78b16d000d57cb68e2b4
    mkdir -p "$XDG_CONFIG_HOME"/kitty/conf.d
    cat "$XDG_CACHE_HOME"/wal/colors-kitty > "$XDG_CONFIG_HOME"/kitty/conf.d/colors.conf
    pgrep -x kitty >/dev/null && pkill -USR1 kitty >/dev/null
}

_mpv() {
    echo ":: mpv reload"
    # Reload custom progress bar (https://github.com/torque/mpv-progressbar)
    PB_PATH="$XDG_CONFIG_HOME"/mpv/script-opts/torque-progressbar
    mkdir -p "$PB_PATH"

    echo "default-style=\\\fnserif\\\bord0\\\shad0\\\fs20\\\c&H$(rgb_to_brg color2)&\\\3c&H$(rgb_to_brg color4)&
bar-height-inactive=3
bar-height-active=10
bar-hide-inactive=yes
bar-default-style=\\\bord0\\\shad0
bar-foreground-style=
bar-cache-style=\\\c&H$(rgb_to_brg color2)&
bar-background-style=\\\c&H$(rgb_to_brg color2)&\\\alpha&HFF&
pause-indicator-foreground-style=\\\c&H$(rgb_to_brg foreground)&
pause-indicator-background-style=\\\c&H$(rgb_to_brg background)&" > "$PB_PATH"/main.conf
}

_pywalfox() {
    pidof firefox >/dev/null && {
        echo ":: firefox reload"
        # Reload pywalfox extension (https://github.com/Frewacom/Pywalfox)
        command -v pywalfox >/dev/null 2>&1 && pywalfox update
        # Reload tridactyl conf with xdotool, a bit hackish but works.
        # - Escape: go to normal mode
        # - comma+s: custom bind to source (reload) config again
        xdotool search --name "Mozilla Firefox" key Escape key comma+s
    }
}

_zathura() {
    echo ":: zathura reload"
    mkdir -p "$XDG_CONFIG_HOME"/zathura
    cat "$XDG_CACHE_HOME"/wal/colors-zathura > "$XDG_CONFIG_HOME"/zathura/colors
}

_rofi() {
    echo ":: rofi reload"
    mkdir -p "$XDG_CONFIG_HOME"/rofi
    cat "$XDG_CACHE_HOME"/wal/colors-rofi > "$XDG_CONFIG_HOME"/rofi/colors.rasi
}

_delta() {
    echo ":: delta theme reload"
    mkdir -p "$XDG_CONFIG_HOME"/git
    cp "$XDG_CACHE_HOME"/wal/colors-delta "$XDG_CONFIG_HOME"/git/delta-theme
    printf "\t%s=true" $(get_theme) >> "$XDG_CONFIG_HOME"/git/delta-theme
}

_xob() {
    echo ":: xob reload"
    mkdir -p "$XDG_CONFIG_HOME"/xob
    cat "$XDG_CACHE_HOME"/wal/colors-xob > "$XDG_CONFIG_HOME"/xob/styles.cfg
    pkill -USR1 xob
    sleep 1
    xob-utils &
}

_nvim() {
    rm -f $XDG_CACHE_HOME/colors.vim
    echo ":: nvim reload"
    pgrep -x nvim >/dev/null && pkill -USR1 nvim
}

_wallpaper
_nvim
_wm
_polybar
_sublime
_pywalfox
_mpv
_dunst
_rofi
_zathura
_delta
_kitty
_xob
