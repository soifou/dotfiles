" vimrc with no extra dependencies
" inspired by https://github.com/jdhao/minimal_vim

" XDG {{{

" See: https://tlvince.com/vim-respect-xdg
if !empty($XDG_CONFIG_HOME)
  set runtimepath-=$HOME/.vim
  set runtimepath-=$HOME/.vim/after
  set runtimepath^=$XDG_CONFIG_HOME/vim
  set runtimepath+=$XDG_DATA_HOME/vim
  set runtimepath+=$XDG_CONFIG_HOME/vim/after

  set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
  set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

  let g:netrw_home = $XDG_DATA_HOME."/vim"
  call mkdir($XDG_DATA_HOME."/vim/spell", 'p')
  set viewdir=$XDG_DATA_HOME/vim/view | call mkdir(&viewdir, 'p')
  set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p')
  set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p')
  set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p')
  set viminfofile=$XDG_CACHE_HOME/vim/viminfo
endif
"}}}

" Builtin plugins {{{

" Disabled
let g:loaded_getscriptPlugin = 1
let g:loaded_gzip = 1
let g:loaded_logiPat = 1
let g:loaded_rrhelper = 1
let g:loaded_spellfile_plugin = 1
let g:loaded_tarPlugin = 1
let g:loaded_2html_plugin = 1
let g:loaded_vimballPlugin = 1
let g:loaded_zipPlugin = 1

" Enabled
runtime! macros/matchit.vim
" }}}

" Settings {{{

set encoding=utf-8
scriptencoding utf-8
filetype plugin indent on

" Enable modeline even if some distro consider it harmful
" See: /usr/share/vim/vim82/debian.vim
" See: https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
set modeline

" Set height of status line
set laststatus=1

" Changing fillchars for folding, so there is no garbage chars
set fillchars=fold:\ ,vert:\│

" Split window below/right when creating horizontal/vertical windows
set splitbelow splitright
if exists('+splitkeep')
  set splitkeep=screen
endif

" Tweak speed
set timeout timeoutlen=400
set ttimeout ttimeoutlen=10
set updatetime=300

" Uneffective without +clipboard flag (see all flags with vim --version)
" See: https://vi.stackexchange.com/questions/13564/why-is-vim-for-debian-compiled-without-clipboard
set clipboard^=unnamed,unnamedplus

" Disable creating swapfiles, see https://stackoverflow.com/q/821902/6064933
set noswapfile

" General tab settings
set tabstop=4       " number of visual spaces per TAB
set softtabstop=4   " number of spaces in tab when editing
set shiftwidth=4    " number of spaces to use for autoindent
set expandtab       " expand tab to spaces so that tabs are spaces

" Set matching pairs of characters and highlight matching brackets
set matchpairs+=<:>,「:」

" Show line number and relative line number
set number relativenumber

" Ignore case in general, but become case-sensitive when uppercase is present
set ignorecase smartcase

" File and script encoding settings for vim
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

" Break line at predefined characters
set linebreak
" Character to show before the lines that have been soft-wrapped
set showbreak=↪

" List all items and start selecting matches in cmd completion
set wildmenu
set wildmode=longest:full
set wildignore+=*.o,*.obj,*.bin,*.dll,*.exe
set wildignore+=*/.git/*,*/.svn/*,*/__pycache__/*,*/build/**
set wildignore+=*.aux,*.pyc,*.bbl,*.blg,*.brf,*.fls,*.fdb_latexmk,*.synctex.gz,*.pdf

" Show current line where the cursor is
set cursorline

" Minimum lines to keep above and below cursor when scrolling
set scrolloff=4

" Use mouse to select text in normal/visual modes
set mouse=nv

" Do not show mode on command line
set noshowmode

" Fileformats to use for new files
set fileformats=unix,dos

" Modes in which cursorline text can be concealed
set concealcursor=nv

" Ask for confirmation when handling unsaved or read-only files
set confirm

" Do not use visual and error bells
set novisualbell noerrorbells

" The level we start to fold
set foldlevel=8
set foldmethod=indent

" The number of command and search history to keep
set history=500

" Use list mode and customized listchars
set list listchars=tab:▸\ ,extends:❯,precedes:❮,nbsp:+

" Auto-write the file based on some condition
set autowrite

" Completion behaviour
set completeopt+=menuone  " Show menu even if there is only one item
set completeopt-=preview  " Disable the preview window

" Settings for popup menu
set pumheight=15  " Maximum number of items to show in popup menu

" Scan files given by `dictionary` option
set complete+=k,kspell complete-=w complete-=b complete-=u complete-=t

" Spell languages
set spelllang=en

" Align indent to next multiple value of shiftwidth. For its meaning,
" see http://vim.1045645.n5.nabble.com/shiftround-option-td5712100.html
set shiftround

" Virtual edit is useful for visual block edit
set virtualedit=block

set formatoptions=
set formatoptions+=c  " auto-wrap comments using textwidth, inserting comment leader
set formatoptions+=j  " remove comment leader when joining lines
set formatoptions+=l  " long lines, longer than textwidth when insert mode is started, do no break automatically
set formatoptions-=o  " do not insert comment leader with oO if run from a commented line
set formatoptions+=r  " but insert it with <cr>
set formatoptions+=q  " allow formatting of options with gq

set shortmess=
set shortmess+=F      " don't print file info when entering a buffer
set shortmess+=c      " no status message for insert mode completions
set shortmess+=f      " "(3 of 5)" instead of "(file 3 of 5)"
set shortmess+=i      " "[noeol]" instead of "[Incomplete last line]"
set shortmess+=l      " "999L, 888C" instead of "999 lines, 888 characters"
set shortmess+=m      " [+] instead of [MODIFIED]
set shortmess+=n      " "[New]" instead of "[New File]"
set shortmess+=t      " t and T truncate messages if they are too long to fit the command line
set shortmess+=x      " write only short format messages for fileformat: unix, mac, dos

" Tilde (~) is an operator, thus must be followed by motions like `e` or `w`.
" set tildeop

" Do not add two spaces after a period when joining lines or formatting texts,
" see https://stackoverflow.com/q/4760428/6064933
set nojoinspaces

" Text after this column is not highlighted
set synmaxcol=500

" Search
set incsearch hlsearch

" Use backsapce to delete
set backspace=indent,eol,start

if v:version >810
    set wildoptions=pum
    set lazyredraw
endif

"}}}}

" Functions {{{

function! GetMode()
    let l:mode=mode(1)
    if l:mode ==# 'i'
      return 'INS'
    elseif l:mode ==# 'c'
      return 'CMD'
    elseif l:mode ==# 'v'
      return 'VISUAL'
    elseif l:mode ==# 'V'
      return 'V-LINE'
    elseif l:mode ==# "\<C-V>"
      return 'V-BLOCK'
    elseif l:mode ==? 'R' || l:mode ==? 'Rv'
      return 'REP'
    elseif l:mode ==? 't'
      return 'TERM'
    endif
    return 'NORM'
endfunction

" Change the statusline color depending on mode
function! ChangeStatuslineColor()
  exe "hi! StatusLine ctermbg=5 ctermfg=0"
  if (mode() =~# '\v(n|no)')
    exe 'hi! StatusLine ctermfg=0 ctermbg=3'
  elseif (mode() =~# '\v(v|V)')
    exe 'hi! StatusLine ctermfg=0 ctermbg=4'
  elseif (mode() ==# 'i')
    exe 'hi! StatusLine ctermfg=4 ctermbg=0'
  endif
  return ''
endfunction

function! GetGitBranch()
    let l:branch = system('cd '.expand('%:p:h').' && git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d "\n"')
    let g:git_branch = !strlen(l:branch) || !isdirectory(expand('%:p:h')) ? '' : ' ' . l:branch . ' │ '
endfunction

" Find out current buffer's size and output it.
function! FileSize()
  let bytes = getfsize(expand('%:p'))
  if (bytes >= 1024)
    let kbytes = bytes / 1024
  endif
  if (exists('kbytes') && kbytes >= 1000)
    let mbytes = kbytes / 1000
  endif

  if bytes <= 0
    return '0'
  endif

  if (exists('mbytes'))
    return mbytes . 'mb '
  elseif (exists('kbytes'))
    return kbytes . 'kb '
  else
    return bytes . 'b '
  endif
endfunction

"}}}}

" Autocommands {{{

" Do not use smart case in command line mode,
" extracted from https://vi.stackexchange.com/q/16509/15292
if exists('##CmdLineEnter')
    augroup dynamic_smartcase
        autocmd!
        autocmd CmdLineEnter : set nosmartcase
        autocmd CmdLineLeave : set smartcase
    augroup END
endif
"
if exists('$SSH_TTY')
    augroup block_cursor
        au!
        " Init block cursor on server
        autocmd VimEnter * silent !echo -ne "\e[2 q"
    augroup END
endif

augroup my_rc
    au!
    " Automatically VimResized
    autocmd VimResized * wincmd =
    " Update git branch variable when opening new buffer
    autocmd BufEnter * call GetGitBranch()
    autocmd FileChangedShell * echo " Warning: File changed on disk"
    " Open help in a vertical split
    autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | vert resize 80 | endif
    " Remove trailing whilespace on save
    autocmd BufWritePre * %s/\s\+$//e
    " Return to last edit position when opening a file (and center screen)
    autocmd BufReadPost * if line("'\"") > 0 && line ("'\"") <= line("$") | exe "normal! g`\"zvzz" | endif
    " Toggle relative number
    autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &number | set relativenumber | endif
    autocmd BufLeave,FocusLost,InsertEnter,WinLeave * if &number | set norelativenumber | endif
augroup END
"}}}}

" Mappings {{{

let mapleader = ' '
let maplocalleader = ','

" Motions
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
inoremap <expr> <C-d> pumvisible()?"\<C-p>":"\<C-d>"

" Enter commandline
nnoremap <LocalLeader>; :
xnoremap <LocalLeader>; :
" Saner commandline history
cnoremap <C-h>  <Left>
cnoremap <C-j>  <Down>
cnoremap <C-k>  <Up>
cnoremap <C-l>  <Right>
cnoremap <C-a>  <Home>
cnoremap <expr> <C-d> pumvisible()?"\<C-p>":"\<C-d>"
" Auto expand current buffer dir
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Remap Ex-mode
nnoremap Q gQ

" Disable annoying command-line window
nnoremap q: <Nop>

" Quick save
nnoremap <silent> <LocalLeader><LocalLeader> :w<Enter>

" Yank from current cursor position to the end of the line (make it
" consistent with the behavior of D, C)
nnoremap Y y$

" Continuous visual shifting (does not exit Visual mode), `gv` means
" to reselect previous visual area, see https://superuser.com/q/310417/736190
xnoremap < <gv
xnoremap > >gv

" Buffer
nnoremap <Leader>] :bnext<CR>
nnoremap <Leader>[ :bprevious<CR>
" switch with most recent buffer
nnoremap <Leader><Leader> :b#<enter>
nnoremap <Leader>x :bdelete!<CR>

" Quickly Move Current Line https://github.com/mhinz/vim-galore#matchit
nnoremap [e  :<C-u>execute 'move -1-'. v:count1<CR>
nnoremap ]e  :<C-u>execute 'move +'. v:count1<CR>

" Quickly Add Empty Lines https://github.com/mhinz/vim-galore#quickly-add-empty-lines
nnoremap [<Leader>  :<C-u>put! =repeat(nr2char(10), v:count1)<CR>'[
nnoremap ]<Leader>  :<C-u>put =repeat(nr2char(10), v:count1)<CR>

" Move selected line / block of text in visual mode
" Capital J/K means you actually need to press Shift
xnoremap K :move '<-2<CR>gv-gv
xnoremap J :move '>+1<CR>gv-gv

" Don't copy cut operation (d,x,c,s) when keystroke sequence begin with \
inoremap \\ "_

" When completion menu is shown, use <cr> to select an item
" and do not add an annoying newline. Otherwise, <enter> is what it is.
" For more info, see https://superuser.com/q/246641/736190 and
" https://unix.stackexchange.com/q/162528/221410
inoremap <expr> <CR> ((pumvisible())?("\<C-Y>"):("\<CR>"))
" Navigate through the completion menu.
inoremap <expr> <Tab>  pumvisible()?"\<C-n>":"\<Tab>"
inoremap <expr> <S-Tab>  pumvisible()?"\<C-p>":"\<S-Tab>"

" Edit and reload init.vim quickly
nnoremap <silent> <Leader>ve :edit $MYVIMRC<CR>
nnoremap <silent> <Leader>vs :silent update $MYVIMRC <BAR> source $MYVIMRC <BAR>
    \ echomsg "Vim config successfully reloaded!"<CR>

" Reselect the text that has just been pasted
nnoremap <LocalLeader>v `[V`]

" Search in selected region
vnoremap / :<C-u>call feedkeys('/\%>'.(line("'<")-1).'l\%<'.(line("'>")+1)."l")<CR>

" Search and replace
nnoremap <LocalLeader>sr :%s//g<Left><Left>

" Change current working directory locally and print cwd after that,
" see https://vim.fandom.com/wiki/Set_working_directory_to_the_current_file
nnoremap <silent> <Leader>cd :lcd %:p:h<CR>:pwd<CR>

" Copy absolute filepath of current buffer in clipboard
" nnoremap <Leader>cp :let @+=expand("%:p")<CR>

" Clear last search pattern from register (remove highlights)
nnoremap <C-l> :let @/ = ''<CR>

" Add numbered motions to the jumplist
nnoremap <expr> k (v:count > 1 ? "m'" . v:count : '') . 'gk'
nnoremap <expr> j (v:count > 1 ? "m'" . v:count : '') . 'gj'
"}}}}

" UI {{{

" Change cursor shapes based on whether we are in insert mode,
" See: https://vi.stackexchange.com/questions/9131/i-cant-switch-to-cursor-in-insert-mode
let &t_SI = "\<esc>[6 q"
let &t_EI = "\<esc>[2 q"
if exists('&t_SR')
    let &t_SR = "\<esc>[4 q"
endif

" Disable modifyOtherKeys
" This is not needed with Kitty terminal
"if &term =~ 'xterm-kitty'
"    let [&t_TI, &t_TE] = ['', '']
"endif

if exists('&termguicolors')
    " If we want to use true colors, we must a color scheme which support true
    " colors, for example, https://github.com/sickill/vim-monokai
    set notermguicolors
endif

set t_Co=256
syntax enable
set background=dark

" NOTE: We use default colorscheme (:h colorscheme)
" It matches relatively well terminal colors
" Add some highlights override
hi Normal ctermfg=NONE ctermbg=NONE cterm=NONE
hi Comment ctermfg=247 ctermbg=NONE cterm=NONE
hi VertSplit ctermfg=247 ctermbg=NONE cterm=NONE
hi CursorLine ctermfg=NONE ctermbg=235 cterm=NONE
hi CursorLineNr ctermfg=15 ctermbg=NONE cterm=NONE
hi LineNr ctermfg=243 ctermbg=NONE cterm=NONE
hi Visual ctermfg=NONE ctermbg=237 cterm=NONE
hi Folded ctermfg=0 ctermbg=3 cterm=italic
hi Search ctermfg=3 ctermbg=0 cterm=reverse
hi IncSearch ctermfg=208 ctermbg=234 cterm=reverse

" Minimal statusline
" Inspired by https://github.com/KaraMCC/vim-streamline
set laststatus=2
hi StatusLine ctermbg=3 ctermfg=0
hi StatusLineNC ctermfg=black ctermbg=red cterm=NONE
hi User1 ctermfg=black ctermbg=magenta
hi User2 ctermfg=NONE ctermbg=235
hi User3 ctermfg=black ctermbg=blue
hi User4 ctermfg=black ctermbg=cyan
call GetGitBranch()
set statusline=                             " Cleanup the previous statusline
set statusline+=%{ChangeStatuslineColor()}  " Change statusline color
set statusline+=%0*\ %{GetMode()}           " Current mode
set statusline+=\ %4*\                      " Padding & switch colour
set statusline+=%(%{g:git_branch}%)         " Git branch
set statusline+=%f                          " Filename
set statusline+=\ %-3(%{FileSize()}%)       " Filesize
set statusline+=%2*\ %=                     " Center
set statusline+=%y                          " File type
set statusline+=\ %4*\ ☰\ %l:%c\ %3p%%\   " Rownumber/total (%)
"}}}}

" vim: foldmethod=marker:foldlevel=1
