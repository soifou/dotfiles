#!/usr/bin/env bash

## Beware! This script is intended to be used by only me, myself and I.
## It keeps me up to date across my *nix journey

command -v pfetch > /dev/null 2>&1 && pfetch

yn() {
    printf "$(tput bold):: $(tput setaf 2)%s$(tput sgr0) [y/N]: " "$1"
    stty -icanon
    answer=$(dd ibs=1 count=1 2> /dev/null)
    # stty icanon
    printf '\n'
    [[ "$answer" =~ ^[Yy]$ ]]
}

debian() {
    yn "Sync server time?" \
        && sudo ntpdate -b pool.ntp.org

    apt list --upgradable 2> /dev/null | grep upgradable > /dev/null && yn "Update system?" && {
        apt list --upgradable
        yn "Upgrade?" && {
            sudo apt upgrade -y 2> /dev/null && sudo apt autoremove -y && sudo apt clean && sudo apt autoclean
            sudo dpkg -l | grep '^rc' | awk '{print $2}' | xargs sudo apt-get purge -y
        }
    }

    if command -v wezterm > /dev/null 2>&1; then
        yn "Update Wezterm?" && {
            curl -LO https://github.com/wez/wezterm/releases/download/nightly/wezterm-nightly.Debian12.deb
            sudo dpkg -i wezterm-nightly.Debian12.deb
            rm -I --preserve-root -f wezterm-nightly.Debian12.deb
        }
    fi
}

arch() {
    yn "Update mirrorlist" && {
        curl -s "https://archlinux.org/mirrorlist/?country=FR&country=GB&country=ES&country=DE&country=CH&protocol=https&ip_version=4&use_mirror_status=on" \
            | sed -e 's/^#Server/Server/' -e '/^#/d' \
            | rankmirrors -n 5 - \
            | sudo tee /etc/pacman.d/mirrorlist
    }

    yn "Update system?" && {
        # upgrade all packages but allow downgrade (second u argument)
        # downgrade is needed in case we update mirrorlist
        sudo pacman -Syuu --noconfirm

        # autoremove unused dependencies
        pacman -Qdtq > /dev/null && pacman -Qdtq | xargs sudo pacman --noconfirm -R || echo "No unused dependencies"

        # clean and autoclean
        sudo pacman -Sc --noconfirm
        sudo pacman -Scc --noconfirm

        # upgrade AUR packages
        paru -Syu
    }
}

macos() {
    yn "Update system?" && {
        softwareupdate --install --all
    }

    if command -v mas > /dev/null 2>&1; then
        mas outdated || {
            yn "Update mas" && {
                mas outdated | while read -r app; do
                    echo "Updating ${app##* }..."
                    mas install "${app%% *}"
                done
            }
        }
    fi

    yn "Sync fonts?" && {
        rm -f ~/Library/Fonts/*.{o,t}tf
        find $XDG_DATA_HOME/fonts -name "*.*tf" -type f -exec cp {} ~/Library/Fonts \;
        sudo fc-cache -fv
    }
}

case $OSTYPE in
    darwin*) macos ;;
    linux*)
        while IFS='=' read -r key val; do
            case $key in
                ID) distro=$val ;;
            esac
        done < /etc/os-release

        [ "$distro" = 'debian' ] && debian
        [ "$distro" = 'arch' ] && arch
        ;;
esac

if command -v mr > /dev/null 2>&1; then
    yn "Update local share?" \
        && mr -c "$XDG_CONFIG_HOME"/myrepos/config -t -d "$XDG_DATA_HOME" update
fi

if command -v yazi > /dev/null 2>&1; then
    if command -v ya > /dev/null 2>&1; then
        yn "Update yazi plugins?" && ya pack -u
    fi
fi

if command -v docker > /dev/null 2>&1; then
    yn "Update docker images?" && {
        docker images --format "{{.Repository}}:{{.Tag}}" \
            | grep -Ev "$(whoami)" \
            | sort \
            | xargs -L1 docker pull \
            | grep "Status:"
        docker system prune -f
    }
fi

if command -v brew > /dev/null 2>&1; then
    yn "Update brew?" && {
        brew update
        brew upgrade --greedy
        case $OSTYPE in
            darwin*) brew upgrade --cask --greedy ;;
        esac
        brew cleanup
    }
fi

if command -v mise > /dev/null 2>&1; then
    yn "Update mise ?" && {
        mise self-update
        mise plugins update
        mise outdated
        yn "Update mise runtime?" && mise upgrade
    }
fi

[ -f "$XDG_DATA_HOME"/zsh/znap/znap.zsh ] && {
    znap="zstyle ':znap:*' repos-dir $XDG_DATA_HOME/zsh/plugins && zstyle ':znap:*:*' git-maintenance off && . $XDG_DATA_HOME/zsh/znap/znap.zsh && znap"
    znap_status=$(zsh --singlecommand -c "$znap status" | grep behind)
    [ -n "$znap_status" ] && {
        echo $znap_status
        yn "Update znap?" && zsh --singlecommand -c "$znap pull"
    }
    unset znap znap_status
}

if command -v cargo-install-update > /dev/null 2>&1; then
    yn "Update global rust dependencies?" \
        && cargo-install-update install-update -a
elif command -v cargo > /dev/null 2>&1; then
    # FIXME: does not auto install using mise
    [ -f "$ASDF_CRATE_DEFAULT_PACKAGES_FILE" ] && {
        yn "Install global rust dependencies?" \
            && cargo install $(cat $ASDF_CRATE_DEFAULT_PACKAGES_FILE | xargs)
    }
fi

if command -v npm > /dev/null 2>&1; then
    yn "Update global node dependencies?" && {
        npm -g outdated
        sleep 3
        npm -g update
    }
fi

if command -v composer > /dev/null 2>&1; then
    yn "Update global composer dependencies?" && {
        composer selfupdate
        rm -f "$XDG_CONFIG_HOME"/composer/*-old.phar
        composer global outdated
        sleep 3
        composer global update
    }
fi

if command -v pip > /dev/null 2>&1; then
    yn "Update global python dependencies?" && {
        pip list --outdated
        sleep 3
        pip install --upgrade pip
        pip freeze --local | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip install -U | grep "Successfully installed"
    }
fi

if command -v gem > /dev/null 2>&1; then
    yn "Update global ruby gems dependencies?" && {
        gem outdated
        sleep 3
        gem update --system
        gem update
        gem cleanup
    }
fi

if command -v go > /dev/null 2>&1; then
    [ -f "$MISE_GO_DEFAULT_PACKAGES_FILE" ] && {
        yn "Update global go dependencies?" && {
            command -v gup > /dev/null 2>&1 && gup update --exclude=go,gofmt \
                || while read -r app; do go install "$app"; done < "$MISE_GO_DEFAULT_PACKAGES_FILE"
            # only need binaries, cleanup the pkg/ folder
            go clean -modcache
        }
    }
fi
