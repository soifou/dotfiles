#compdef console

_console()
{
    local state com cur

    cur=${words[${#words[@]}]}

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    if [[ ${cur} == --* ]]; then
        state="option"
        opts=("--help:Display this help message" "--quiet:Do not output any message" "--verbose:Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug" "--version:Display this application version" "--ansi:Force ANSI output" "--no-ansi:Disable ANSI output" "--no-interaction:Do not ask any interactive question" "--env:The Environment name." "--no-debug:Switches off debug mode.")
    elif [[ $cur == $com ]]; then
        state="command"
        coms=("about:Displays information about the current project" "help:Displays help for a command" "list:Lists commands" "assets\:install:Installs bundles web assets under a public directory" "cache\:clear:Clears the cache" "cache\:pool\:clear:Clears cache pools" "cache\:pool\:delete:Deletes an item from a cache pool" "cache\:pool\:prune:Prunes cache pools" "cache\:warmup:Warms up an empty cache" "config\:dump-reference:Dumps the default configuration for an extension" "debug\:autowiring:Lists classes/interfaces you can use for autowiring" "debug\:config:Dumps the current configuration for an extension" "debug\:container:Displays current services for an application" "debug\:event-dispatcher:Displays configured listeners for an application" "debug\:form:Displays form type information" "debug\:router:Displays current routes for an application" "debug\:swiftmailer:Displays current mailers for an application" "debug\:translation:Displays translation messages information" "debug\:twig:Shows a list of twig functions, filters, globals and tests" "doctrine\:cache\:clear-collection-region:Clear a second-level cache collection region" "doctrine\:cache\:clear-entity-region:Clear a second-level cache entity region" "doctrine\:cache\:clear-metadata:Clears all metadata cache for an entity manager" "doctrine\:cache\:clear-query:Clears all query cache for an entity manager" "doctrine\:cache\:clear-query-region:Clear a second-level cache query region" "doctrine\:cache\:clear-result:Clears result cache for an entity manager" "doctrine\:cache\:contains:Check if a cache entry exists" "doctrine\:cache\:delete:Delete a cache entry" "doctrine\:cache\:flush:Flush a given cache" "doctrine\:cache\:stats:Get stats on a given cache provider" "doctrine\:database\:create:Creates the configured database" "doctrine\:database\:drop:Drops the configured database" "doctrine\:database\:import:Import SQL file\(s\) directly to Database." "doctrine\:ensure-production-settings:Verify that Doctrine is properly configured for a production environment" "doctrine\:fixtures\:load:Load data fixtures to your database." "doctrine\:generate\:entities:Generates entity classes and method stubs from your mapping information" "doctrine\:mapping\:convert:Convert mapping information between supported formats" "doctrine\:mapping\:import:Imports mapping information from an existing database" "doctrine\:mapping\:info" "doctrine\:migrations\:diff:Generate a migration by comparing your current database to your mapping information." "doctrine\:migrations\:execute:Execute a single migration version up or down manually." "doctrine\:migrations\:generate:Generate a blank migration class." "doctrine\:migrations\:latest:Outputs the latest version number" "doctrine\:migrations\:migrate:Execute a migration to a specified version or the latest available version." "doctrine\:migrations\:status:View the status of a set of migrations." "doctrine\:migrations\:version:Manually add and delete migration versions from the version table." "doctrine\:query\:dql:Executes arbitrary DQL directly from the command line" "doctrine\:query\:sql:Executes arbitrary SQL directly from the command line." "doctrine\:schema\:create:Executes \(or dumps\) the SQL needed to generate the database schema" "doctrine\:schema\:drop:Executes \(or dumps\) the SQL needed to drop the current database schema" "doctrine\:schema\:update:Executes \(or dumps\) the SQL needed to update the database schema to match the current mapping metadata" "doctrine\:schema\:validate:Validate the mapping files" "hautelook\:fixtures\:load:Load data fixtures to your database." "kairos\:cleanup:Clean reset password requests" "kairos\:jobs:Import job list from CSV file" "liip\:imagine\:cache\:remove:Remove cache for given paths and set of filters." "liip\:imagine\:cache\:resolve:Resolve cache for given path and set of filters." "lint\:twig:Lints a template and outputs encountered errors" "lint\:xliff:Lints a XLIFF file and outputs encountered errors" "lint\:yaml:Lints a file and outputs encountered errors" "make\:auth:Creates an empty Guard authenticator" "make\:command:Creates a new console command class" "make\:controller:Creates a new controller class" "make\:crud:Creates CRUD for Doctrine entity class" "make\:entity:Creates or updates a Doctrine entity class, and optionally an API Platform resource" "make\:fixtures:Creates a new class to load Doctrine fixtures" "make\:form:Creates a new form class" "make\:functional-test:Creates a new functional test class" "make\:migration:Creates a new migration based on database changes" "make\:serializer\:encoder:Creates a new serializer encoder class" "make\:subscriber:Creates a new event subscriber class" "make\:twig-extension:Creates a new Twig extension class" "make\:unit-test:Creates a new unit test class" "make\:validator:Creates a new validator and constraint class" "make\:voter:Creates a new security voter class" "oneup\:uploader\:clear-chunks:Clear chunks according to the max-age you defined in your configuration." "oneup\:uploader\:clear-orphans:Clear orphaned uploads according to the max-age you defined in your configuration." "router\:match:Helps debug routes by simulating a path info match" "security\:encode-password:Encodes a password." "swiftmailer\:email\:send:Send simple email message" "swiftmailer\:spool\:send:Sends emails from the spool" "translation\:update:Updates the translation file" "vich\:mapping\:debug:Debug a mapping." "vich\:mapping\:debug-class:Debug a class." "vich\:mapping\:list-classes:Searches for uploadable classes.")
    fi

    case $state in
        command)
            _describe 'command' coms
        ;;
        option)
            case "$com" in

            about)
            opts+=()
            ;;

            help)
            opts+=("--format:The output format \(txt, xml, json, or md\)" "--raw:To output raw command help")
            ;;

            list)
            opts+=("--raw:To output raw command list" "--format:The output format \(txt, xml, json, or md\)")
            ;;

            assets:install)
            opts+=("--symlink:Symlinks the assets instead of copying it" "--relative:Make relative symlinks" "--no-cleanup:Do not remove the assets of the bundles that no longer exist")
            ;;

            cache:clear)
            opts+=("--no-warmup:Do not warm up the cache" "--no-optional-warmers:Skip optional cache warmers \(faster\)")
            ;;

            cache:pool:clear)
            opts+=()
            ;;

            cache:pool:delete)
            opts+=()
            ;;

            cache:pool:prune)
            opts+=()
            ;;

            cache:warmup)
            opts+=("--no-optional-warmers:Skip optional cache warmers \(faster\)")
            ;;

            config:dump-reference)
            opts+=("--format:The output format \(yaml or xml\)")
            ;;

            debug:autowiring)
            opts+=()
            ;;

            debug:config)
            opts+=()
            ;;

            debug:container)
            opts+=("--show-private:Used to show public \*and\* private services \(deprecated\)" "--show-arguments:Used to show arguments in services" "--show-hidden:Used to show hidden \(internal\) services" "--tag:Shows all services with a specific tag" "--tags:Displays tagged services for an application" "--parameter:Displays a specific parameter for an application" "--parameters:Displays parameters for an application" "--types:Displays types \(classes/interfaces\) available in the container" "--format:The output format \(txt, xml, json, or md\)" "--raw:To output raw description")
            ;;

            debug:event-dispatcher)
            opts+=("--format:The output format  \(txt, xml, json, or md\)" "--raw:To output raw description")
            ;;

            debug:form)
            opts+=("--format:The output format \(txt or json\)")
            ;;

            debug:router)
            opts+=("--show-controllers:Show assigned controllers in overview" "--format:The output format \(txt, xml, json, or md\)" "--raw:To output raw route\(s\)")
            ;;

            debug:swiftmailer)
            opts+=()
            ;;

            debug:translation)
            opts+=("--domain:The messages domain" "--only-missing:Displays only missing messages" "--only-unused:Displays only unused messages" "--all:Load messages from all registered bundles")
            ;;

            debug:twig)
            opts+=("--format:The output format \(text or json\)")
            ;;

            doctrine:cache:clear-collection-region)
            opts+=("--all:If defined, all entity regions will be deleted/invalidated." "--flush:If defined, all cache entries will be flushed." "--em:The entity manager to use for this command")
            ;;

            doctrine:cache:clear-entity-region)
            opts+=("--all:If defined, all entity regions will be deleted/invalidated." "--flush:If defined, all cache entries will be flushed." "--em:The entity manager to use for this command")
            ;;

            doctrine:cache:clear-metadata)
            opts+=("--flush:If defined, cache entries will be flushed instead of deleted/invalidated." "--em:The entity manager to use for this command")
            ;;

            doctrine:cache:clear-query)
            opts+=("--flush:If defined, cache entries will be flushed instead of deleted/invalidated." "--em:The entity manager to use for this command")
            ;;

            doctrine:cache:clear-query-region)
            opts+=("--all:If defined, all query regions will be deleted/invalidated." "--flush:If defined, all cache entries will be flushed." "--em:The entity manager to use for this command")
            ;;

            doctrine:cache:clear-result)
            opts+=("--flush:If defined, cache entries will be flushed instead of deleted/invalidated." "--em:The entity manager to use for this command")
            ;;

            doctrine:cache:contains)
            opts+=()
            ;;

            doctrine:cache:delete)
            opts+=("--all:Delete all cache entries in provider")
            ;;

            doctrine:cache:flush)
            opts+=()
            ;;

            doctrine:cache:stats)
            opts+=()
            ;;

            doctrine:database:create)
            opts+=("--shard:The shard connection to use for this command" "--connection:The connection to use for this command" "--if-not-exists:Don\'t trigger an error, when the database already exists")
            ;;

            doctrine:database:drop)
            opts+=("--connection:The connection to use for this command" "--shard:The shard connection to use for this command" "--if-exists:Don't trigger an error, when the database doesn't exist" "--force:Set this parameter to execute this action")
            ;;

            doctrine:database:import)
            opts+=("--connection:The connection to use for this command")
            ;;

            doctrine:ensure-production-settings)
            opts+=("--complete:Flag to also inspect database connection existence." "--em:The entity manager to use for this command")
            ;;

            doctrine:fixtures:load)
            opts+=("--append:Append the data fixtures instead of deleting all data from the database first." "--em:The entity manager to use for this command." "--shard:The shard connection to use for this command." "--purge-with-truncate:Purge data by using a database-level TRUNCATE statement")
            ;;

            doctrine:generate:entities)
            opts+=("--path:The path where to generate entities when it cannot be guessed" "--no-backup:Do not backup existing entities files.")
            ;;

            doctrine:mapping:convert)
            opts+=("--filter:A string pattern used to match entities that should be processed." "--force:Force to overwrite existing mapping files." "--from-database:Whether or not to convert mapping information from existing database." "--extend:Defines a base class to be extended by generated entity classes." "--num-spaces:Defines the number of indentation spaces" "--namespace:Defines a namespace for the generated entity classes, if converted from database." "--em:The entity manager to use for this command")
            ;;

            doctrine:mapping:import)
            opts+=("--em:The entity manager to use for this command" "--shard:The shard connection to use for this command" "--filter:A string pattern used to match entities that should be mapped." "--force:Force to overwrite existing mapping files." "--path:The path where the files would be generated \(not used when a bundle is passed\).")
            ;;

            doctrine:mapping:info)
            opts+=("--em:The entity manager to use for this command")
            ;;

            doctrine:migrations:diff)
            opts+=("--editor-cmd:Open file with this command upon creation." "--configuration:The path to a migrations configuration file." "--db-configuration:The path to a database connection configuration file." "--filter-expression:Tables which are filtered by Regular Expression." "--formatted:Format the generated SQL." "--line-length:Max line length of unformatted lines." "--db:The database connection to use for this command." "--em:The entity manager to use for this command." "--shard:The shard connection to use for this command.")
            ;;

            doctrine:migrations:execute)
            opts+=("--write-sql:The path to output the migration SQL file instead of executing it." "--dry-run:Execute the migration as a dry run." "--up:Execute the migration up." "--down:Execute the migration down." "--query-time:Time all the queries individually." "--configuration:The path to a migrations configuration file." "--db-configuration:The path to a database connection configuration file." "--db:The database connection to use for this command." "--em:The entity manager to use for this command." "--shard:The shard connection to use for this command.")
            ;;

            doctrine:migrations:generate)
            opts+=("--editor-cmd:Open file with this command upon creation." "--configuration:The path to a migrations configuration file." "--db-configuration:The path to a database connection configuration file." "--db:The database connection to use for this command." "--em:The entity manager to use for this command." "--shard:The shard connection to use for this command.")
            ;;

            doctrine:migrations:latest)
            opts+=("--configuration:The path to a migrations configuration file." "--db-configuration:The path to a database connection configuration file." "--db:The database connection to use for this command." "--em:The entity manager to use for this command." "--shard:The shard connection to use for this command.")
            ;;

            doctrine:migrations:migrate)
            opts+=("--write-sql:The path to output the migration SQL file instead of executing it. Default to current working directory." "--dry-run:Execute the migration as a dry run." "--query-time:Time all the queries individually." "--allow-no-migration:Don\'t throw an exception if no migration is available \(CI\)." "--configuration:The path to a migrations configuration file." "--db-configuration:The path to a database connection configuration file." "--db:The database connection to use for this command." "--em:The entity manager to use for this command." "--shard:The shard connection to use for this command.")
            ;;

            doctrine:migrations:status)
            opts+=("--show-versions:This will display a list of all available migrations and their status" "--configuration:The path to a migrations configuration file." "--db-configuration:The path to a database connection configuration file." "--db:The database connection to use for this command." "--em:The entity manager to use for this command." "--shard:The shard connection to use for this command.")
            ;;

            doctrine:migrations:version)
            opts+=("--add:Add the specified version." "--delete:Delete the specified version." "--all:Apply to all the versions." "--range-from:Apply from specified version." "--range-to:Apply to specified version." "--configuration:The path to a migrations configuration file." "--db-configuration:The path to a database connection configuration file." "--db:The database connection to use for this command." "--em:The entity manager to use for this command." "--shard:The shard connection to use for this command.")
            ;;

            doctrine:query:dql)
            opts+=("--hydrate:Hydration mode of result set. Should be either: object, array, scalar or single-scalar." "--first-result:The first result in the result set." "--max-result:The maximum number of results in the result set." "--depth:Dumping depth of Entity graph." "--show-sql:Dump generated SQL instead of executing query" "--em:The entity manager to use for this command")
            ;;

            doctrine:query:sql)
            opts+=("--depth:Dumping depth of result set." "--force-fetch:Forces fetching the result." "--connection:The connection to use for this command")
            ;;

            doctrine:schema:create)
            opts+=("--dump-sql:Instead of trying to apply generated SQLs into EntityManager Storage Connection, output them." "--em:The entity manager to use for this command")
            ;;

            doctrine:schema:drop)
            opts+=("--dump-sql:Instead of trying to apply generated SQLs into EntityManager Storage Connection, output them." "--force:Don\'t ask for the deletion of the database, but force the operation to run." "--full-database:Instead of using the Class Metadata to detect the database table schema, drop ALL assets that the database contains." "--em:The entity manager to use for this command")
            ;;

            doctrine:schema:update)
            opts+=("--complete:If defined, all assets of the database which are not relevant to the current metadata will be dropped." "--dump-sql:Dumps the generated SQL statements to the screen \(does not execute them\)." "--force:Causes the generated SQL statements to be physically executed against your database." "--em:The entity manager to use for this command")
            ;;

            doctrine:schema:validate)
            opts+=("--skip-mapping:Skip the mapping validation check" "--skip-sync:Skip checking if the mapping is in sync with the database" "--em:The entity manager to use for this command")
            ;;

            hautelook:fixtures:load)
            opts+=("--bundle:Bundles where fixtures should be loaded." "--manager:The entity manager to use for this command. If not specified, use the default Doctrine fixtures entitymanager." "--append:Append the data fixtures instead of deleting all data from the database first." "--shard:The shard database id to use for this command." "--purge-with-truncate:Purge data by using a database-level TRUNCATE statement when using Doctrine fixtures.")
            ;;

            kairos:cleanup)
            opts+=()
            ;;

            kairos:jobs)
            opts+=("--kind:kind \(craft or skill \?\)")
            ;;

            liip:imagine:cache:remove)
            opts+=("--filters:Filters list")
            ;;

            liip:imagine:cache:resolve)
            opts+=("--filters:Filters list")
            ;;

            lint:twig)
            opts+=("--format:The output format")
            ;;

            lint:xliff)
            opts+=("--format:The output format")
            ;;

            lint:yaml)
            opts+=("--format:The output format" "--parse-tags:Parse custom tags")
            ;;

            make:auth)
            opts+=()
            ;;

            make:command)
            opts+=()
            ;;

            make:controller)
            opts+=()
            ;;

            make:crud)
            opts+=()
            ;;

            make:entity)
            opts+=("--api-resource:Mark this class as an API Platform resource \(expose a CRUD API for it\)" "--regenerate:Instead of adding new fields, simply generate the methods \(e.g. getter/setter\) for existing fields" "--overwrite:Overwrite any existing getter/setter methods")
            ;;

            make:fixtures)
            opts+=()
            ;;

            make:form)
            opts+=()
            ;;

            make:functional-test)
            opts+=()
            ;;

            make:migration)
            opts+=("--db:The database connection name" "--em:The entity manager name" "--shard:The shard connection name")
            ;;

            make:serializer:encoder)
            opts+=()
            ;;

            make:subscriber)
            opts+=()
            ;;

            make:twig-extension)
            opts+=()
            ;;

            make:unit-test)
            opts+=()
            ;;

            make:validator)
            opts+=()
            ;;

            make:voter)
            opts+=()
            ;;

            oneup:uploader:clear-chunks)
            opts+=()
            ;;

            oneup:uploader:clear-orphans)
            opts+=()
            ;;

            router:match)
            opts+=("--method:Sets the HTTP method" "--scheme:Sets the URI scheme \(usually http or https\)" "--host:Sets the URI host")
            ;;

            security:encode-password)
            opts+=("--empty-salt:Do not generate a salt or let the encoder generate one.")
            ;;

            swiftmailer:email:send)
            opts+=("--from:The from address of the message" "--to:The to address of the message" "--subject:The subject of the message" "--body:The body of the message" "--mailer:The mailer name" "--content-type:The body content type of the message" "--charset:The body charset of the message" "--body-source:The source where body come from \[stdin\|file\]")
            ;;

            swiftmailer:spool:send)
            opts+=("--message-limit:The maximum number of messages to send." "--time-limit:The time limit for sending messages \(in seconds\)." "--recover-timeout:The timeout for recovering messages that have taken too long to send \(in seconds\)." "--mailer:The mailer name." "--transport:The service of the transport to use to send the messages.")
            ;;

            translation:update)
            opts+=("--prefix:Override the default prefix" "--output-format:Override the default output format" "--dump-messages:Should the messages be dumped in the console" "--force:Should the update be done" "--no-backup:Should backup be disabled" "--clean:Should clean not found messages" "--domain:Specify the domain to update")
            ;;

            vich:mapping:debug)
            opts+=()
            ;;

            vich:mapping:debug-class)
            opts+=()
            ;;

            vich:mapping:list-classes)
            opts+=()
            ;;

            esac

            _describe 'option' opts
        ;;
        *)
            # fallback to file completion
            _arguments '*:file:_files'
    esac
}

compdef _console console
compdef _console sf
