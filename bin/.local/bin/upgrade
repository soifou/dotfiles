#!/usr/bin/env bash

## Beware! This script is intended to be used by only me, myself and I.
## It keeps me up to date across my *nix journey

[ -f /System/Library/CoreServices/SystemVersion.plist ] && {
    echo "Sorry!"
    exit 1
}

yn() {
    printf "$(tput bold):: $(tput setaf 2)%s$(tput sgr0) [y/n]: " "$1"
    stty -icanon
    answer=$(dd ibs=1 count=1 2> /dev/null)
    stty icanon
    printf '\n'
    [[ "$answer" =~ ^[Yy]$ ]]
}

debian() {
    yn "Sync server time?" \
        && sudo ntpdate -b pool.ntp.org

    yn "Update system?" && {
        sudo apt upgrade -y 2> /dev/null && sudo apt autoremove -y && sudo apt clean && sudo apt autoclean
        sudo dpkg -l | grep '^rc' | awk '{print $2}' | xargs sudo apt-get purge -y
    }

    if command -v keybase > /dev/null 2>&1; then
        yn "Update Keybase CLI?" && {
            curl -O https://prerelease.keybase.io/keybase_amd64.deb
            sudo dpkg -i keybase_amd64.deb
            sudo apt-get install -f
            run_keybase
            rm -f keybase_amd64.deb
        }
    fi
}

arch() {
    yn "Update mirrorlist" && {
        curl -s "https://archlinux.org/mirrorlist/?country=FR&country=GB&country=ES&country=DE&country=CH&protocol=https&ip_version=4&use_mirror_status=on" \
            | sed -e 's/^#Server/Server/' -e '/^#/d' \
            | rankmirrors -n 5 - \
            | sudo tee /etc/pacman.d/mirrorlist
    }

    yn "Update system?" && {
        # upgrade all packages but allow downgrade (second u argument)
        # downgrade is needed in case we update mirrorlist
        sudo pacman -Syuu --noconfirm

        # autoremove unused dependencies
        pacman -Qdtq > /dev/null && pacman -Qdtq | xargs sudo pacman --noconfirm -R || echo "No unused dependencies"

        # clean and autoclean
        sudo pacman -Sc --noconfirm
        sudo pacman -Scc --noconfirm

        # upgrade AUR packages
        paru -Syu
    }
}

while IFS='=' read -r key val; do
    case $key in
        ID) distro=$val ;;
    esac
done < /etc/os-release

[ "$distro" = 'debian' ] && debian
[ "$distro" = 'arch' ] && arch

if command -v mr > /dev/null 2>&1; then
    yn "Update local share?" \
        && mr -c "$XDG_CONFIG_HOME"/myrepos/config -t -d "$XDG_DATA_HOME" update
fi

if command -v docker > /dev/null 2>&1; then
    yn "Update docker images?" && {
        docker images --format "{{.Repository}}:{{.Tag}}" \
            | grep -Ev "$(whoami)" \
            | sort \
            | xargs -L1 docker pull \
            | grep "Status:"
        docker system prune -f
        # docker volume prune -f
    }
fi

if command -v brew > /dev/null 2>&1; then
    yn "Update brew?" && {
        brew update
        brew upgrade
        brew cleanup
    }
fi

if command -v gh > /dev/null 2>&1; then
    gh extension upgrade --all --dry-run
    yn "Update gh extensions?" && gh extension upgrade --all --force
fi

if command -v rtx > /dev/null 2>&1; then
    yn "Update rtx plugins?" && rtx plugins update
fi

[ -f "$XDG_DATA_HOME"/zsh/znap/znap.zsh ] && {
    yn "Update znap?" \
        && zsh --singlecommand -c '
            zstyle ":znap:*:*" git-maintenance off &&
            zstyle ":znap:*" plugins-dir "$XDG_DATA_HOME"/zsh/plugins &&
            . "$XDG_DATA_HOME"/zsh/znap/znap.zsh &&
            znap pull | grep updating...
        '
}

if command -v cargo-install-update > /dev/null 2>&1; then
    yn "Update global rust dependencies?" \
        && cargo-install-update install-update -a
fi

if command -v npm > /dev/null 2>&1; then
    yn "Update global node dependencies?" && {
        npm -g outdated
        sleep 3
        npm -g update
    }
fi

if command -v composer > /dev/null 2>&1; then
    yn "Update global composer dependencies?" && {
        composer selfupdate
        rm -f "$XDG_CONFIG_HOME"/composer/*-old.phar
        composer global outdated
        sleep 3
        composer global update
    }
fi

if command -v pip > /dev/null 2>&1; then
    yn "Update global python dependencies?" && {
        pip list --outdated
        sleep 3
        pip install --upgrade pip
        pip freeze --local | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip install -U | grep "Successfully installed"
    }
fi

if command -v gem > /dev/null 2>&1; then
    yn "Update global ruby gems dependencies?" && {
        gem outdated
        sleep 3
        gem update --system
        gem update
        gem cleanup
    }
fi

if command -v go > /dev/null 2>&1; then
    [ -f "$ASDF_GOLANG_DEFAULT_PACKAGES_FILE" ] && {
        yn "Update global go dependencies?" && {
            while read -r app; do go install "$app"; done < "$ASDF_GOLANG_DEFAULT_PACKAGES_FILE"
        }
    }
fi

cd "$HOME" || exit
