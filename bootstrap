#!/usr/bin/env bash

echo_version() {
    echo "v1.0.0";
}

backup_file() {
    rm $HOME/$1.dotbackup
    test -e $HOME/$1 && cp -LiR $HOME/$1 $HOME/$1.dotbackup && rm -rf $HOME/$1
    true
}

backup_directory() {
    rm -rf $HOME/$1.dotbackup
    test -d $HOME/$1.dotbackup && echo -n "~/$1.dotbackup: " && rm -rI $HOME/$1.dotbackup
    test -d $HOME/$1 && cp -LR $HOME/$1 $HOME/$1.dotbackup && rm -rf $HOME/$1
    true
}

link_file() {
    backup_file $2
    ln -s `pwd`/$1 $HOME/$2
}

link_directory() {
    backup_directory $2
    ln -s `pwd`/$1 $HOME/$2
}

copy_file() {
    backup_file $2
    cp `pwd`/$1 $HOME/$2
}

clone_or_pull_repo() {
    if [ ! -f $HOME/$2/README.md ]; then
        git clone https://github.com/$1.git $HOME/$2
    else
        pushd $HOME/$2 > /dev/null
        git pull
        popd > /dev/null
    fi
}

# load_zsh_modules() {
#     echo "Loading zsh modules..."
#     while read l; do
#         IFS=/ read -a path <<< "$l"
#         clone_or_pull_repo "$l" ".zsh_modules/${path[1]}"
#     done < $HOME/.zmodules
# }

# install_virtualenvwrapper() {
#     echo "Installing virtualenvwrapper..."
#     curl -s https://raw.githubusercontent.com/brainsik/virtualenv-burrito/master/virtualenv-burrito.sh | exclude_profile=1 $SHELL || true
# }

configure_shell() {
    echo "Configuring common shell environment..."
    link_file .bash_aliases .bash_aliases
    link_file .shenv .shenv
    if [ "$OSTYPE" == "darwin"* ]; then
        copy_file .bash_local-mac .bash_local
    else
        copy_file .bash_local-linux .bash_local
    fi
}

configure_bash() {
    echo "Configuring bash..."
    link_file bashrc .bashrc
    echo "Set default shell to bash"
    chsh -s $(which bash)
}

configure_zsh() {
    # Clone oh-my-zsh repository from GitHub only if it isn't already present
    if [[ ! -d $HOME/.oh-my-zsh/ ]]; then
        echo "Clone oh-my-zsh repository"
        clone_or_pull_repo robbyrussell/oh-my-zsh .oh-my-zsh
    fi

    link_file zshrc .zshrc
    backup_file .zcompdump

    # Install zsh if needed
    if [ -f /bin/zsh -o -f /usr/bin/zsh ]; then
        echo "zsh is already installed... skip"
    else
        if [ "$OSTYPE" == "darwin"* ]; then
            echo "OSX : Please install zsh via homebrew - brew install zsh"
        else
            sudo apt-get install zsh
        fi
    fi

    echo "Set default shell to zsh"
    chsh -s $(which zsh)
}

configure_git() {
    echo "Configuring git..."
    if [ -z "$GIT_NAME" ]; then
        read -p "Git user.name: " GIT_NAME
    fi
    if [ -z "$GIT_EMAIL" ]; then
        read -p "Git user.email: " GIT_EMAIL
    fi
    backup_file .gitconfig
    sed -e 's/\[\[GIT_NAME\]\]/'"$GIT_NAME"'/g' -e 's/\[\[GIT_EMAIL\]\]/'"$GIT_EMAIL"'/g' `pwd`/git/gitconfig > $HOME/.gitconfig
    link_file git/gitignore .gitignore
}

configure_vim() {
    echo "Configuring vim..."
    link_file vimrc .vimrc
    link_directory vim .vim
    clone_or_pull_repo gmarik/vundle .vim/bundle/Vundle.vim
    echo "Installing Vim plugins. Please wait..."
    vim +PluginInstall +qall > /dev/null 2>&1
}

# configure_ipython() {
#     echo "Configuring ipython..."
#     if [ "$OSTYPE" == "darwin"* ]; then
#         link_directory .ipython .ipython
#     else
#         mkdir -p $HOME/.config
#         link_directory .ipython .config/ipython
#     fi
# }

delete_backups() {
    rm -rf $HOME/.gitconfig.dotbackup
    rm -rf $HOME/.gitignore.dotbackup
    rm -rf $HOME/.vim.dotbackup
    rm -rf $HOME/.vimrc.dotbackup
    rm -rf $HOME/.oh-my-zsh.dotbackup
    rm -rf $HOME/.zcompdump.dotbackup
    rm -rf $HOME/.zshrc.dotbackup
}

# update() {
#     echo "Updating configuration..."
#     git pull origin master
#     if [ "$NO_VIM" != 1 ]; then
#         echo "Updating Vim plugins. Please wait..."
#         vim +PluginUpdate +qall > /dev/null 2>&1
#     fi
#     load_zsh_modules
#     rm -f $HOME/.zcompdump
# }

set -e

while :
do
    case $1 in
        -h | --help | -\?)
            echo "Dotfiles - Bootstrap available commands";
            echo "---------------------------------------";
            echo "--bash - Create a bashrc file and set it as default shell";
            echo "--delete-backups - Remove all dotbackup files";
            echo "--git - Create config/ignore Git files for the current user";
            echo "--git-name - Set your Git display name";
            echo "--git-email - Set your Git email";
            echo "--vim - Create custom vimrc, add colors/syntax/plugins"
            echo "--zsh - Install and config Zsh as default shell";
            exit 0; ;;
        -v | --version) echo_version; exit 0; ;;

        --git) GIT=1; shift; ;;
        --git-name) GIT_NAME=$2; shift 2; ;;
        --git-email) GIT_EMAIL=$2; shift 2; ;;

        --bash) BASH=1; shift; ;;
        --zsh) ZSH=1; shift; ;;
        --vim) VIM=1; shift; ;;

        --delete-backups) DELETE_BACKUPS=1; shift; ;;

        --update) UPDATE=1; shift; ;;
        --no-virtualenv) NO_VIRTUALENVWRAPPER=1; shift; ;;
        --) shift; break; ;;
        -*) printf >&2 'WARNING: Unknown option (ignored): %s\n' "$1"; shift; ;;
        *) break; ;;
    esac
done

if [ "$DELETE_BACKUPS" == 1 ]; then
    delete_backups
    echo "Backups deleted."
    exit 0
fi

# if [ "$UPDATE" == 1 ]; then
#     update
#     echo "Done."
#     exit 0
# fi

# if [ "$NO_VIRTUALENVWRAPPER" != 1 ]; then
#     install_virtualenvwrapper
# fi
# if [ "$NO_BASH" != 1 ] || [ "$NO_ZSH" != 1 ]; then
#     configure_shell
# fi

if [ "$BASH" == 1 ]; then
    configure_bash
fi
if [ "$ZSH" == 1 ]; then
    configure_zsh
fi
if [ "$GIT" == 1 ]; then
    configure_git
fi
if [ "$VIM" == 1 ]; then
    configure_vim
fi
# if [ "$NO_I3" != 1 ]; then
#     configure_i3
# fi
# if [ "$NO_TMUX" != 1 ]; then
#     configure_tmux
# fi
# if [ "$NO_IPYTHON" != 1 ]; then
#     configure_ipython
# fi

echo "Done."


# credits : https://github.com/alanctkc/dotfiles/blob/master/bootstrap.sh