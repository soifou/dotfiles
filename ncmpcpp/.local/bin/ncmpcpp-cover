#!/usr/bin/env sh

# Cover art script for ncmpcpp using kitty icat protocol

# SETTINGS
music_library="$XDG_MUSIC_DIR/library"
fallback_image="$XDG_CONFIG_HOME/ncmpcpp/vinyl.jpg"
streaming_path="$XDG_CONFIG_HOME/ncmpcpp/radio.jpg"

padding_top=2
padding_bottom=2
padding_left=0
# padding_right=0
# max_width=50

find_cover_image() {
    song_dir="$(mpc --format %file% current)"

    # Current song is a HTTP stream?
    case "$song_dir" in
        http://* | https://*) cover_path="$streaming_path" && return ;;
    esac

    # Check if the audio file has an embedded album art
    ext="$(mpc --format %file% current | sed 's/^.*\.//')"
    if [ "$ext" = "flac" ]; then
        # since FFMPEG cannot export embedded FLAC art we use metaflac
        metaflac --export-picture-to=/tmp/mpd_cover.jpg \
            "$(mpc --format "$music_library"/%file% current)" \
            && cover_path="/tmp/mpd_cover.jpg" && return
    else
        ffmpeg -y -i "$(mpc --format "$music_library"/%file% | head -n 1)" \
            /tmp/mpd_cover.jpg \
            && cover_path="/tmp/mpd_cover.jpg" && return
    fi

    # If no embedded art was found we look inside the music file's directory
    album="$(mpc --format %album% current)"
    file="$(mpc --format %file% current)"
    album_dir="${file%/*}"
    album_dir="$music_library/$album_dir"
    found_covers="$(find "$album_dir" -type d -exec find {} -maxdepth 1 -type f \
        -iregex ".*/.*\(${album}\|cover\|folder\|artwork\|front\).*[.]\\(jpe?g\|png\|gif\|bmp\)" \;)"
    cover_path="$(echo "$found_covers" | head -n1)"
    [ -n "$cover_path" ] && return

    # If we still failed to find a cover image, we use the fallback
    cover_path=$fallback_image
}

display_cover_image() {
	unset LINES COLUMNS # Required in order for tput to work in a script
	term_lines=$(tput lines)
	term_cols=$(tput cols)

	# guess_font_size
	term_width=$(kitten icat --print-window-size | cut -dx -f1)
	term_height=$(kitten icat --print-window-size | cut -dx -f2)
	approx_font_width=$((term_width / term_cols))
	approx_font_height=$((term_height / term_lines))
	term_xpadding=$(((-approx_font_width * term_cols + term_width) / 2))
	term_ypadding=$(((-approx_font_height * term_lines + term_height) / 2))
	font_width=$(((term_width - 2 * term_xpadding) / term_cols))
	font_height=$(((term_height - 2 * term_ypadding) / term_lines))
	icat_height=$((term_lines - padding_top - padding_bottom))
	icat_width=$((icat_height * font_height / font_width))
	# icat_left=$((term_cols - icat_width - padding_right))

	# compute_geometry_left_aligned
	icat_left=$padding_left
	# max_width_chars=$((term_cols * max_width / 100))
	# if [ "$max_width" != 0 ] \
	#     && [ $((icat_width + padding_right + padding_left)) -gt "$max_width_chars" ]; then
	#     icat_width=$((max_width_chars - padding_left - padding_right))
	# fi

	kitten icat --silent --transfer-mode=stream --clear
	kitten icat --silent --stdin no --transfer-mode memory --scale-up --place "${icat_width}x${icat_height}@${icat_left}x${padding_top}" "$cover_path" < /dev/null > /dev/tty
}

find_cover_image > /dev/null 2>&1
display_cover_image 2> /dev/null
